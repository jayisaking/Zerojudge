import java.util.Scanner;

public class B554 {
	public static int[][] k;
	public static boolean[][] k1;
	public static int n;
	static int finalmax = 0;

	public static void dfs(int a, int b, int times) {
		int l = 0;
		if (a < n - 1) {
			if ((!k1[a + 1][b]) && k[a + 1][b] == 1) {
				k1[a + 1][b] = true;
				dfs(a + 1, b, times + 1);
				k1[a + 1][b] = false;
				l = 1;
			}
		}
		if (b < n - 1) {
			if ((!k1[a][b + 1]) && k[a][b + 1] == 1) {
				k1[a][b + 1] = true;
				dfs(a, b + 1, times + 1);
				k1[a][b + 1] = false;
				l = 1;
			}
		}
		if (b > 0) {
			if ((!k1[a][b - 1]) && k[a][b - 1] == 1) {
				k1[a][b - 1] = true;
				dfs(a, b - 1, times + 1);
				k1[a][b - 1] = false;
				l = 1;
			}
		}
		if (a > 0) {
			if ((!k1[a - 1][b]) && k[a - 1][b] == 1) {
				k1[a - 1][b] = true;
				dfs(a - 1, b, times + 1);
				k1[a - 1][b] = false;
				l = 1;
			}
		}
		if (l == 0) {
			if (times > finalmax) {
				finalmax = times;
			}

		}

	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		sc.nextLine();
		k = new int[n][n];
		k1 = new boolean[n][n];
		for (int i = 0; i < n; i++) {
			String s = sc.nextLine();
			for (int o = 0; o < n; o++) {
				k[i][o] = Integer.parseInt(s.substring(o, o + 1));
			}
		}
		k1[0][0] = true;
		dfs(0, 0, 1);
		System.out.println(finalmax);

	}
}
