#include<iostream>
#include<math.h>
using namespace std;
int m,n;
int mark;
char mark1;
struct node
{
    bool walk=false;
    int a;
};
node k[20][20];
int dfs(int x,int y,int num)
{
    if(y>0)
    {
        if((!k[x][y-1].walk)&&k[x][y-1].a==mark)
        {
            k[x][y-1].walk=true;
            num=dfs(x,y-1,num+1);
        }
    }
    else if(y==0)
    {
        if((!k[x][n-1].walk)&&k[x][n-1].a==mark)
        {
            k[x][n-1].walk=true;
            num=dfs(x,n-1,num+1);
        }
    }

    if((!k[x][(y+1)%n].walk)&&k[x][(y+1)%n].a==mark)
    {
        k[x][(y+1)%n].walk=true;
        num=dfs(x,(y+1)%n,num+1);
    }
    if(x>0)
    {
        if((!k[x-1][y].walk)&&k[x-1][y].a==mark)
        {
            k[x-1][y].walk=true;
            num=dfs(x-1,y,num+1);
        }
    }
    if(x<m-1)
    {
        if((!k[x+1][y].walk)&&k[x+1][y].a==mark)
        {
            k[x+1][y].walk=true;
            num=dfs(x+1,y,num+1);
        }

    }
    return num;
}
int main()
{

    while(cin>>m>>n)
    {
        string s;
        for(int i=0; i<m; i++)
        {
            cin>>s;
            for(int o=0; o<n; o++)
            {
                if(i==0&&o==0)
                {
                    mark1=s[0];
                }
                k[i][o].walk=false;
                if(s[o]==mark1)
                {
                    k[i][o].a=0;
                }
                else
                {
                    k[i][o].a=1;
                }
            }
        }
        int x,y;
        cin>>x>>y;
        k[x][y].walk=true;
        mark=k[x][y].a;
        dfs(x,y,1);
        int ans=0;
        for(int i=0; i<m; i++)
        {
            for(int o=0; o<n; o++)
            {
                if((!k[i][o].walk)&&k[i][o].a==mark)
                {
                    k[i][o].walk=true;
                    ans=max(ans,dfs(i,o,1));
                }
            }
        }
        cout<<ans<<endl;
    }
}
